 import numpy as np
import pandas as pd
from keras.datasets import imdb
from keras.utils import to_categorical
from keras import models
from keras import layers
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split

# loading imdb data with most frequent 10000 words
(X_train, y_train), (X_test, y_test) = imdb.load_data(num_words=10000)

data = np.concatenate((X_train, X_test), axis=0)
label = np.concatenate((y_train, y_test), axis=0)

print("Review is:", X_train[5])  # series of words converted to vocabulary associated with index
print("Label is:", y_train[5])  # 0 indicating a negative review and 1 indicating a positive review.

vocab = imdb.get_word_index()  # retrieves the word index for the IMDB dataset
print(vocab)

data # data is a numpy array that contains all the text data from the IMDB dataset, both the training and testing sets.

label # label is a numpy array that contains all the sentiment labels from the IMDB dataset, both the training and testing sets. 0 indicates a negative review and 1 indicates a positive review.

print("X_train shape:", X_train.shape)
print("X_test shape:", X_test.shape)
print("y_train shape:", y_train.shape)
print("y_test shape:", y_test.shape)

def vectorize(sequences, dimension=10000):
    # Create an all-zero matrix of shape (len(sequences), dimension)
    results = np.zeros((len(sequences), dimension))
    for i, sequence in enumerate(sequences):
        results[i, sequence] = 1
    return results

train_data = vectorize(data)
train_labels = np.array(label).astype("float32")

test_data = train_data[:10000]
test_labels = train_labels[:10000]
train_data = train_data[10000:]
train_labels = train_labels[10000:]

print("Categories:", np.unique(label))
print("Number of unique words:", len(np.unique(np.hstack(data))))

length = [len(i) for i in data]
print("Average Review length:", np.mean(length))
print("Standard Deviation:", round(np.std(length)))

print("Label:", label[0])
print("Data:", data[0])

index = imdb.get_word_index()
reverse_index = {value: key for (key, value) in index.items()}
decoded = " ".join([reverse_index.get(i - 3, "#") for i in data[0]])
print("Decoded Review:", decoded)

sns.set(color_codes=True)

labelDF = pd.DataFrame({'label': label})
sns.countplot(x='label', data=labelDF)

X_train, X_test, y_train, y_test = train_test_split(train_data, train_labels, test_size=0.20, random_state=1)

model = models.Sequential()
model.add(layers.Dense(50, activation="relu", input_shape=(10000,)))
model.add(layers.Dropout(0.3))
model.add(layers.Dense(50, activation="relu"))
model.add(layers.Dropout(0.2))
model.add(layers.Dense(50, activation="relu"))
model.add(layers.Dense(1, activation="sigmoid"))
model.summary()

model.compile(
    optimizer="adam",
    loss="binary_crossentropy",
    metrics=["accuracy"]
)

results = model.fit(
    X_train, y_train,
    epochs=2,
    batch_size=500,
    validation_data=(X_test, y_test)
)

print("Mean Validation Accuracy:", np.mean(results.history["val_accuracy"]))

plt.plot(results.history['accuracy'])
plt.plot(results.history['val_accuracy'])
plt.title('Model Accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'], loc='upper left')
plt.show()

plt.plot(results.history['loss'])
plt.plot(results.history['val_loss'])
plt.title('Model Loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'], loc='upper left')
plt.show()

model.predict(X_test)
